{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 31737,
     "status": "ok",
     "timestamp": 1653287399451,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "YMjjXJlJ4ciW",
    "outputId": "dc0be05d-19e5-4146-9ec6-eeeb466cabf0"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'google.colab'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\NIVASW~1\\AppData\\Local\\Temp/ipykernel_6520/451384764.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mdrive\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"/content/drive\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'google.colab'"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount(\"/content/drive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "H-poviKK8GKo"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import keras\n",
    "from keras.layers import *\n",
    "from keras.models import * \n",
    "from keras.preprocessing import image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "67SZ80bc_A7U"
   },
   "outputs": [],
   "source": [
    "#Training model\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)))\n",
    "model.add(Conv2D(128,(3,3),activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(64,(3,3),activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(128,(3,3),activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64,activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1,activation='sigmoid'))\n",
    "\n",
    "model.compile(loss=keras.losses.binary_crossentropy,optimizer='adam',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 625,
     "status": "ok",
     "timestamp": 1653287434869,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "dmIkiNA1_Iyr",
    "outputId": "ccc4b862-ac7e-4b69-f52a-f9711e7686e7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 222, 222, 32)      896       \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 220, 220, 128)     36992     \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 110, 110, 128)    0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 110, 110, 128)     0         \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 108, 108, 64)      73792     \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 54, 54, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 54, 54, 64)        0         \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 52, 52, 128)       73856     \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 26, 26, 128)      0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 26, 26, 128)       0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 86528)             0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 64)                5537856   \n",
      "                                                                 \n",
      " dropout_3 (Dropout)         (None, 64)                0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 65        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 5,723,457\n",
      "Trainable params: 5,723,457\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#Getting parameters\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "h4x9XJoN_VCV"
   },
   "outputs": [],
   "source": [
    "#Moulding train images\n",
    "train_datagen = image.ImageDataGenerator(rescale = 1./255, shear_range = 0.2,zoom_range = 0.2, horizontal_flip = True)\n",
    "\n",
    "test_dataset = image.ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wHiLhGXhn15Z"
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3212,
     "status": "ok",
     "timestamp": 1653287472738,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "cyNWj3Cq_bHN",
    "outputId": "7b55ba6d-6e54-454e-869e-148bc51cc91a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 224 images belonging to 2 classes.\n",
      "Found 69 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    " #Reshaping test and validation images \n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    '/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Train',\n",
    "    target_size = (224,224),\n",
    "    batch_size = 32,\n",
    "    class_mode = 'binary')\n",
    "validation_generator = test_dataset.flow_from_directory(\n",
    "    '/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Val',\n",
    "    target_size = (224,224),\n",
    "    batch_size = 32,\n",
    "    class_mode = 'binary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1272645,
     "status": "ok",
     "timestamp": 1653288769547,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "42w1JuF2B-VC",
    "outputId": "d7ce9383-4c22-4d09-eca7-be14e78f7933"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "7/7 [==============================] - 126s 17s/step - loss: 1.2635 - accuracy: 0.4911 - val_loss: 0.6537 - val_accuracy: 0.5625\n",
      "Epoch 2/10\n",
      "7/7 [==============================] - 102s 15s/step - loss: 0.5951 - accuracy: 0.6652 - val_loss: 0.5171 - val_accuracy: 0.7812\n",
      "Epoch 3/10\n",
      "7/7 [==============================] - 102s 15s/step - loss: 0.4536 - accuracy: 0.7991 - val_loss: 0.3637 - val_accuracy: 0.9688\n",
      "Epoch 4/10\n",
      "7/7 [==============================] - 106s 15s/step - loss: 0.3328 - accuracy: 0.8795 - val_loss: 0.3546 - val_accuracy: 0.9688\n",
      "Epoch 5/10\n",
      "7/7 [==============================] - 103s 15s/step - loss: 0.2052 - accuracy: 0.9286 - val_loss: 0.1516 - val_accuracy: 0.9531\n",
      "Epoch 6/10\n",
      "7/7 [==============================] - 103s 15s/step - loss: 0.2615 - accuracy: 0.9152 - val_loss: 0.1600 - val_accuracy: 0.9844\n",
      "Epoch 7/10\n",
      "7/7 [==============================] - 103s 15s/step - loss: 0.1966 - accuracy: 0.9330 - val_loss: 0.1117 - val_accuracy: 0.9844\n",
      "Epoch 8/10\n",
      "7/7 [==============================] - 103s 15s/step - loss: 0.1701 - accuracy: 0.9464 - val_loss: 0.0830 - val_accuracy: 0.9844\n",
      "Epoch 9/10\n",
      "7/7 [==============================] - 106s 15s/step - loss: 0.1064 - accuracy: 0.9732 - val_loss: 0.0442 - val_accuracy: 1.0000\n",
      "Epoch 10/10\n",
      "7/7 [==============================] - 104s 15s/step - loss: 0.1754 - accuracy: 0.9286 - val_loss: 0.0739 - val_accuracy: 0.9844\n"
     ]
    }
   ],
   "source": [
    "#Training the model\n",
    "hist_new = model.fit(\n",
    "    train_generator,\n",
    "    steps_per_epoch=7,\n",
    "    epochs = 10,\n",
    "    validation_data = validation_generator,\n",
    "    validation_steps=2\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 672,
     "status": "ok",
     "timestamp": 1653264084919,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "ANxpzSHrEOMN",
    "outputId": "1e1e8b8d-074e-414c-f0bc-76765d72d662"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'loss': [1.0538618564605713, 0.5800115466117859, 0.38298606872558594, 0.26870593428611755, 0.24839256703853607, 0.2198856770992279, 0.13983629643917084, 0.12284523993730545, 0.1826048344373703, 0.10895740240812302], 'accuracy': [0.5580357313156128, 0.7232142686843872, 0.8303571343421936, 0.8794642686843872, 0.9107142686843872, 0.9285714030265808, 0.9375, 0.9419642686843872, 0.9508928656578064, 0.96875], 'val_loss': [0.6803719997406006, 0.500730574131012, 0.2445772886276245, 0.23186862468719482, 0.10856910049915314, 0.14022406935691833, 0.0767194926738739, 0.04498616233468056, 0.09727790206670761, 0.0771109014749527], 'val_accuracy': [0.921875, 0.921875, 0.9375, 0.984375, 0.984375, 0.984375, 0.96875, 0.984375, 0.96875, 0.984375]}\n"
     ]
    }
   ],
   "source": [
    "#Getting summary\n",
    "summary=hist_new.history\n",
    "print(summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "KhO8Ja2ri-Sv"
   },
   "outputs": [],
   "source": [
    "model.save(\"model_covid.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 43000,
     "status": "ok",
     "timestamp": 1653264134338,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "PFRGKxK1jB8m",
    "outputId": "0de9c4b8-6613-4f18-f3c7-cbdd222a8c9a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 34s 5s/step - loss: 0.1099 - accuracy: 0.9688\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.10990072041749954, 0.96875]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(train_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 11481,
     "status": "ok",
     "timestamp": 1653264156034,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "6xVLPGGHjGok",
    "outputId": "00de21f3-8fc6-4988-e124-ae67ede3a3cd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 [==============================] - 10s 2s/step - loss: 0.0759 - accuracy: 0.9855\n",
      "[0.07589354366064072, 0.9855072498321533]\n"
     ]
    }
   ],
   "source": [
    "print(model.evaluate(validation_generator))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 440,
     "status": "ok",
     "timestamp": 1653264161581,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "pRTgCS4njJHo",
    "outputId": "93f1025e-78a1-4840-babf-1a5ba1d8c432"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Covid': 0, 'Normal': 1}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "train_generator.class_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jSx-Wv9VjLJv"
   },
   "outputs": [],
   "source": [
    "y_actual, y_test = [],[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0hqocfqIjMvc"
   },
   "outputs": [],
   "source": [
    "for i in os.listdir(\"/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Val/Normal\"):\n",
    "    img=image.load_img(\"/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Val/Normal/\"+i,target_size=(224,224))\n",
    "    img=image.img_to_array(img)\n",
    "    img=np.expand_dims(img,axis=0)\n",
    "    pred=model.predict(img)\n",
    "    y_test.append(pred[0,0])\n",
    "    y_actual.append(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "TUMeg6W1jOqE"
   },
   "outputs": [],
   "source": [
    "for i in os.listdir(\"/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Val/Covid/\"):\n",
    "    img=image.load_img(\"/content/drive/MyDrive/Covid-19-Detection-master/CovidDataset/Val/Covid/\"+i,target_size=(224,224))\n",
    "    img=image.img_to_array(img)\n",
    "    img=np.expand_dims(img,axis=0)\n",
    "    pred=model.predict(img)\n",
    "    y_test.append(pred[0,0])\n",
    "    y_actual.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2FYW4gb9jQUU"
   },
   "outputs": [],
   "source": [
    "y_actual=np.array(y_actual)\n",
    "y_test=np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QfYqK7DjjRx8"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "cn=confusion_matrix(y_actual,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "executionInfo": {
     "elapsed": 968,
     "status": "ok",
     "timestamp": 1653264197921,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "-QXlzBpBjTkg",
    "outputId": "4bb1edb2-1c09-458a-95ea-854cafd1f729"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe72b813b10>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(cn,cmap=\"plasma\",annot=True) #0: Covid ; 1: Normal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 427,
     "status": "ok",
     "timestamp": 1653264201302,
     "user": {
      "displayName": "jyothsna dora",
      "userId": "10598102473996875763"
     },
     "user_tz": -330
    },
    "id": "1sz8HWlXjVUA",
    "outputId": "8bee0ab4-e406-4664-f46b-543087250e85"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[30,  0],\n",
       "       [ 1, 38]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "yiduldSq4D-a"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyO/YrNMh0CXivMF6DwqV4kP",
   "collapsed_sections": [],
   "name": "Mini Project.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
